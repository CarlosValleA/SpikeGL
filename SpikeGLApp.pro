######################################################################
# Automatically generated by qmake (2.01a) Tue Apr 21 18:41:54 2009
# Manually edited since then! :)
######################################################################

TEMPLATE = app
TARGET = SpikeGL
DEPENDPATH += .
INCLUDEPATH += .

# Input
HEADERS += SpikeGL.h DataFile.h Params.h sha1.h Util.h TypeDefs.h \
           ConsoleWindow.h MainApp.h Version.h \
           ConfigureDialogController.h DAQ.h GraphsWindow.h GLGraph.h \
           SampleBufQ.h Vec.h WrapBuffer.h VecWrapBuffer.h \
           Sha1VerifyTask.h Par2Window.h StimGL_SpikeGL_Integration.h \
           HPFilter.h ChanMappingController.h ChanMap.h  CommandServer.h \
           SockUtil.h QLed.h TempDataFile.h FileViewerWindow.h \
           ExportDialogController.h ClickableLabel.h GLSpatialVis.h \
           SpatialVisWindow.h \
           Bug_ConfigDialog.h Bug_Popout.h \
           FG_ConfigDialog.h \
           FrameGrabber/FG_SpikeGL/FG_SpikeGL/XtCmd.h \
           PagedRingBuffer.h stdafx.h \
    Thread_Compat.h \
    GenericGrapher.h

SOURCES += DataFile.cpp osdep.cpp Params.cpp sha1.cpp Util.cpp \
           MainApp.cpp ConsoleWindow.cpp main.cpp \
           ConfigureDialogController.cpp DAQ.cpp GraphsWindow.cpp \
           GLGraph.cpp SampleBufQ.cpp WrapBuffer.cpp Sha1VerifyTask.cpp \
           Par2Window.cpp StimGL_SpikeGL_Integration.cpp HPFilter.cpp \
           ChanMappingController.cpp ChanMap.cpp CommandServer.cpp SockUtil.cpp \
           QLed.cpp TempDataFile.cpp FileViewerWindow.cpp \
           ExportDialogController.cpp ClickableLabel.cpp GLSpatialVis.cpp \
           SpatialVisWindow.cpp \
           Bug_ConfigDialog.cpp Bug_Popout.cpp \
           FG_ConfigDialog.cpp \
           PagedRingBuffer.cpp


FORMS += ConfigureDialog.ui AcqPDParams.ui AcqTimedParams.ui Par2Window.ui \
         StimGLIntegration.ui ChanMapping.ui AOPassthru.ui Dialog.ui \
         ApplyDialog.ui TextBrowser.ui CommandServerOptions.ui \
         TempFileDialog.ui ExportDialog.ui FVW_OptionsDialog.ui \
         Bug_ConfigDialog.ui Bug_Popout.ui FG_ConfigDialog.ui \
         FG_Controls.ui SampleBuf_Dialog.ui \
    FVW_Readme.ui \
    FG_ChanMapDialog.ui \
    Bug_ExtraAIParams.ui

QT += opengl network svg

RESOURCES += qled.qrc bug3.qrc framegrabber.qrc

win32 {
        LIBS += $${PWD}/NI/NIDAQmx.lib WS2_32.lib DelayImp.lib Psapi.lib
        DEFINES += HAVE_NIDAQmx _CRT_SECURE_NO_WARNINGS WIN32 PSAPI_VERSION=1
        RESOURCES += Resources.qrc
        RC_FILE += WinResources.rc
        HEADERS += AOWriteThread.h
        SOURCES += AOWriteThread.cpp
        QMAKE_CFLAGS_RELEASE -= /O2 /O1 -O1 -O2
        QMAKE_CXXFLAGS_RELEASE -= /O2 /O1 -O1 -O2
        QMAKE_CFLAGS_RELEASE += -arch:SSE2 -Ox
        QMAKE_CXXFLAGS_RELEASE += -arch:SSE2 -Ox
        QMAKE_LFLAGS += /DELAYLOAD:"nicaiu.dll"

        contains(QMAKE_TARGET.arch, x86_64) {
            DEFINES += WIN64
            LIBS -= $${PWD}/NI/NIDAQmx.lib
            LIBS += $${PWD}/NI/x64/NIDAQmx.lib
            QMAKE_CFLAGS_RELEASE -= -arch:SSE2
            QMAKE_CXXFLAGS_RELEASE -= -arch:SSE2
        }

        greaterThan(QT_MAJOR_VERSION, 4) {
            LIBS += opengl32.lib GDI32.lib GLU32.lib user32.lib kernel32.lib
#            QMAKE_LFLAGS += /VERBOSE:LIB
        }

}

unix {
        CONFIG += warn_on
        DEFINES += UNIX
        QMAKE_CFLAGS_WARN_ON += -Wno-unused-private-field -Wno-deprecated-declarations -Wno-invalid-offsetof
        QMAKE_CXXFLAGS_WARN_ON += -Wno-unused-private-field -Wno-deprecated-declarations -Wno-invalid-offsetof
}

macx {
        DEFINES -= UNIX
        LIBS += -framework CoreServices
	DEFINES += MACX
        QMAKE_MAC_SDK = macosx10.12
        CONFIG -= app_bundle
}

!contains(DEFINES,HAVE_NIDAQmx) {
    RESOURCES += fakedaq.qrc
    DEFINES += FAKEDAQ
}

RESOURCES += CommonResources.qrc
ICON = SpikeGL.icns

# Embed the samplerate lib into the executable..
include(samplerate/samplerate.pri)

QMAKE_EXTRA_TARGETS += copyfake_fg
PRE_TARGETDEPS += copyfake_fg
!win32 {
   copyfake_fg.commands += cp -v FrameGrabber/Fake_FG_SpikeGL/Fake_FG $$PWD/FrameGrabber/Fake_FG.exe
}
win32:debug {
        copyfake_fg.commands = copy $$shell_path($$shadowed(FrameGrabber/Fake_FG_SpikeGL/debug/Fake_FG.exe)) $$shell_path($$PWD/FrameGrabber)
}
win32:release {
        copyfake_fg.commands = copy $$shell_path($$shadowed(FrameGrabber/Fake_FG_SpikeGL/release/Fake_FG.exe)) $$shell_path($$PWD/FrameGrabber)
}


